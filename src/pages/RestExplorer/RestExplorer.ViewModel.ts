import { makeHttpRequestV2 } from "$lib/api/api.common";
import type { TabDocument } from "$lib/database/app.database";
import { TabRepository } from "$lib/repositories/tab.repository";
import { createDeepCopy } from "$lib/utils/helpers";
import type {
  KeyValuePair,
  NewTab,
  Response,
} from "$lib/utils/interfaces/request.interface";
import { BehaviorSubject, Observable } from "rxjs";

class RestExplorerViewModel {
  // _httpMethod = "";
  private _httpMethod: BehaviorSubject<string> = new BehaviorSubject("");
  private _requestUrl: BehaviorSubject<string> = new BehaviorSubject("");
  private emptyHeaders: KeyValuePair[] = [];
  private _requestHeaders: BehaviorSubject<KeyValuePair[]> =
    new BehaviorSubject(this.emptyHeaders);
  private _requestAutoGeneratedHeaders: BehaviorSubject<KeyValuePair[]> =
    new BehaviorSubject(this.emptyHeaders);
  private _requestState: BehaviorSubject<any> = new BehaviorSubject({});
  private _requestAuth: BehaviorSubject<any> = new BehaviorSubject({});
  private tabRepository = new TabRepository();
  private _activeTab;
  // create a behaviour subject for all the tabs
  public constructor() {
    // get active data from rxdb and find using ID And initiate the Rest Explorer
    // create the behaviour subject
    this.tabRepository.getTabLs().then((res: TabDocument[]) => {
      res.forEach((doc) => {
        if (doc.isActive) {
          this.activeTab = createDeepCopy(doc.toMutableJSON());
          this.requestUrl = this.activeTab.property.request.url;
          this.httpMethod = this.activeTab.property.request.method;
          this.requestHeaders = this.activeTab.property.request.headers;
          this.requestAutoGeneratedHeaders =
            this.activeTab.property.request.autoGeneratedHeaders;
          this.requestState = this.activeTab.property.request.state;
          this.requestAuth = this.activeTab.property.request.auth;
        }
      });
    });
  }

  public get activeTab() {
    return createDeepCopy(this._activeTab);
  }

  private set activeTab(value) {
    this._activeTab = value;
  }

  public get requestUrl(): Observable<string> {
    return this._requestUrl.asObservable();
  }
  private set requestUrl(value: string) {
    this._requestUrl.next(value);
  }

  public get httpMethod(): Observable<string> {
    return this._httpMethod.asObservable();
  }
  private set httpMethod(value: string) {
    this._httpMethod.next(value);
  }

  public get requestHeaders(): Observable<KeyValuePair[]> {
    return this._requestHeaders.asObservable();
  }
  private set requestHeaders(value: KeyValuePair[]) {
    this._requestHeaders.next(value);
  }

  public get requestAutoGeneratedHeaders(): Observable<KeyValuePair[]> {
    return this._requestAutoGeneratedHeaders.asObservable();
  }
  private set requestAutoGeneratedHeaders(value: KeyValuePair[]) {
    this._requestAutoGeneratedHeaders.next(value);
  }

  public get requestState(): Observable<any> {
    return this._requestState.asObservable();
  }
  private set requestState(value) {
    this._requestState.next(value);
  }

  public get requestAuth(): Observable<any> {
    return this._requestAuth.asObservable();
  }
  private set requestAuth(value) {
    this._requestAuth.next(value);
  }

  public response = new BehaviorSubject<Response | undefined>(undefined);

  public updateRequestUrl = async (url: string) => {
    const activeTab = this.activeTab;
    activeTab.property.request.url = url;
    this.activeTab = activeTab;
    this.tabRepository.updateTab(activeTab.tabId, activeTab);
    this.requestUrl = url;
  };

  public updateRequestMethod = async (method: string) => {
    const activeTab = this.activeTab;
    activeTab.property.request.method = method;
    this.activeTab = activeTab;
    this.tabRepository.updateTab(activeTab.tabId, activeTab);
    this.httpMethod = method;
  };

  public updateHeaders = async (headers: string) => {
    const activeTab = this.activeTab;
    activeTab.property.request.headers = headers;
    this.activeTab = activeTab;
    this.tabRepository.updateTab(activeTab.tabId, activeTab);
    this.httpMethod = headers;
  };

  public updateAutoGeneratedHeaders = async (headers: string) => {
    const activeTab = this.activeTab;
    activeTab.property.request.autoGeneratedHeaders = headers;
    this.activeTab = activeTab;
    this.tabRepository.updateTab(activeTab.tabId, activeTab);
    this.httpMethod = headers;
  };

  public updateRequestState = async (_state: any) => {
    const activeTab = this.activeTab;
    activeTab.property.request.state = {
      ...activeTab.property.request.state,
      ..._state,
    };
    this.activeTab = activeTab;
    this.tabRepository.updateTab(activeTab.tabId, activeTab);
    this.requestState = this.activeTab.property.request.state;
  };

  public updateRequestAuth = async (_auth: any) => {
    const activeTab = this.activeTab;
    activeTab.property.request.auth = {
      ...activeTab.property.request.auth,
      ..._auth,
    };
    this.activeTab = activeTab;
    this.tabRepository.updateTab(activeTab.tabId, activeTab);
    this.requestState = this.activeTab.property.request.auth;
  };

  public sendRequest = async () => {
    try {
      const str: string = this.requestUrl.getValue();
      const response = await makeHttpRequestV2(str, this.httpMethod);
      const responseHeaders = response.data.headers;
      const formattedResponse: Response = {
        headers: Object.keys(responseHeaders).map((k) => ({
          key: k,
          value: responseHeaders[k],
          checked: false,
        })),
        body: response.data.body,
      };
      this.response.next(formattedResponse);
    } catch (error) {
      console.error(error);
    }
  };
}

export default RestExplorerViewModel;
