/* eslint-disable @typescript-eslint/no-explicit-any */
import {
  RequestDataset,
  RequestMethod,
  RequestDataType,
} from "$lib/utils/enums/request.enum";

import type {
  Body,
  KeyValuePair,
  NewTab,
} from "$lib/utils/interfaces/request.interface";
import type {
  RequestDatasetType,
  RequestRawType,
} from "$lib/utils/types/request.type";
import { ReduceAuthHeader, ReduceAuthParameter } from ".";

class DecodeRequest {
  constructor() {}

  /**
   * @description
   * Extracts the content type from the API response and sets it in the user's state.
   * @param responseHeaders - Response header object
   */
  public setResponseContentType = (responseHeaders): string => {
    if (responseHeaders) {
      for (let i = 0; i < responseHeaders.length; i++) {
        const key = responseHeaders[i].key;
        const value = responseHeaders[i].value;
        if (key === "content-type" && value.includes("text/html")) {
          return RequestDataType.HTML;
        } else if (
          key === "content-type" &&
          value.includes("application/json")
        ) {
          return RequestDataType.JSON;
        } else if (
          key === "content-type" &&
          value.includes("application/hal+json")
        ) {
          return RequestDataType.JSON;
        } else if (
          key === "content-type" &&
          value.includes("application/xml")
        ) {
          return RequestDataType.XML;
        } else if (
          key === "content-type" &&
          value.includes("application/javascript")
        ) {
          return RequestDataType.JAVASCRIPT;
        } else if (key === "content-type" && value.startsWith("image/")) {
          return RequestDataType.IMAGE;
        } else if (key === "content-type") {
          return RequestDataType.TEXT;
        }
      }
    }
  };

  /**
   * Checks if http/https is present or not and modify url
   * @param str - Url String
   */
  private ensureHttpOrHttps = (str) => {
    if (str.startsWith("http://") || str.startsWith("https://")) {
      return "";
    } else if (str.startsWith("//")) {
      return "http:";
    } else {
      return "http://";
    }
  };

  /**
   * Return only checked Key Value Pairs
   * @param pairs - Key value Pairs
   * @returns
   */
  private extractKeyValue = (pairs: any[]) => {
    const checkedPairs = [];
    for (const pair of pairs) {
      if (pair.checked) {
        checkedPairs.push(pair);
      }
    }
    return checkedPairs;
  };

  /**
   * Extracts and modifies a URL based on authentication parameters and environment variables.
   * @param url - Request Url
   * @param request - Request Tab
   * @param environmentVariables - Environment Variables Array
   * @returns {string} Modified Url
   */
  private extractURL = (
    url: string,
    request: NewTab,
    environmentVariables,
  ): string => {
    // Get authentication header
    const authHeader: {
      key: string;
      value: string;
    } = new ReduceAuthParameter(request.state, request.auth).getValue();
    // Check if authentication header exists
    if (authHeader.key || authHeader.value) {
      let flag: boolean = false;
      // Check if URL already has query parameters
      for (let i = 0; i < url.length; i++) {
        if (url[i] === "?") {
          flag = true;
        }
      }

      if (!flag) {
        url = this.ensureHttpOrHttps(url) + url + "?";
      } else {
        url = this.ensureHttpOrHttps(url) + url + "&";
      }

      url = this.setEnvironmentVariables(
        url + authHeader.key + "=" + authHeader.value,
        environmentVariables,
      );
      return url;
    }
    return this.ensureHttpOrHttps(url) + url;
  };

  /**
   * Extracts and combines headers from different sources, including auto-generated headers and authentication headers.
   * @param {KeyValuePair[]} headers - Headers provided by the user.
   * @param {KeyValuePair[]} autoGeneratedHeaders - Auto-generated headers.
   * @param {NewTab} request - Request Tab.
   * @returns {string} Stringified Headers Array.
   */
  private extractHeaders = (
    headers: KeyValuePair[],
    autoGeneratedHeaders: KeyValuePair[],
    request: NewTab,
  ): string => {
    const authHeader: {
      key: string;
      value: string;
    } = new ReduceAuthHeader(request.state, request.auth).getValue();

    // Combine headers from different sources
    const combinedHeaders = this.extractKeyValue([
      ...headers,
      ...autoGeneratedHeaders,
    ]);

    // Add auth header if it exists
    if (authHeader.key || authHeader.value) {
      combinedHeaders.push(authHeader);
    }
    return JSON.stringify(combinedHeaders);
  };

  /**
   * Extracts and formats the request body based on the specified data type.
   * @param {RequestDatasetType} datatype - Body Type
   * @param {RequestRawType} rawData - Raw Body Type
   * @param {Body} body - Request Body
   * @returns {string} Stringified Body
   */
  private extractBody = (
    datatype: RequestDatasetType,
    rawData: RequestRawType,
    body: Body,
  ): string => {
    const { raw, urlencoded, formdata } = body;
    if (datatype === RequestDataset.RAW) {
      if (rawData === RequestDataType.JSON && raw === "") {
        return "{}";
      }
      return raw;
    } else if (datatype === RequestDataset.FORMDATA) {
      const bodyArray = [];
      const textBodyArray = this.extractKeyValue(formdata.text);
      const fileBodyArray = this.extractKeyValue(formdata.file);
      bodyArray.push(...textBodyArray);
      bodyArray.push(...fileBodyArray);
      return JSON.stringify(bodyArray);
    } else if (datatype === RequestDataset.URLENCODED) {
      return JSON.stringify(this.extractKeyValue(urlencoded));
    } else if (datatype === RequestDataset.NONE) {
      return "";
    }
    return "";
  };

  /**
   * Extracts and formats the HTTP request method.
   * @param method - Request Method Type
   * @returns - Request Method
   */
  private extractMethod = (method: string): string => {
    if (method === RequestMethod.DELETE) {
      return "DELETE";
    } else if (method === RequestMethod.GET) {
      return "GET";
    } else if (method === RequestMethod.HEAD) {
      return "HEAD";
    } else if (method === RequestMethod.OPTIONS) {
      return "OPTIONS";
    } else if (method === RequestMethod.PATCH) {
      return "PATCH";
    } else if (method === RequestMethod.POST) {
      return "POST";
    } else if (method === RequestMethod.PUT) {
      return "PUT";
    }
    return "";
  };

  /**
   * Extracts and formats the data type of the request body.
   * @param {RequestDatasetType} datatype - Request Body Type
   * @param raw - Raw Body Type
   * @returns {string} - Formatted Body Type
   */
  private extractDataType = (
    datatype: RequestDatasetType,
    raw: RequestRawType,
  ): string => {
    if (datatype === RequestDataset.RAW) {
      if (raw === RequestDataType.JSON) {
        return "application/json";
      } else {
        return "text/plain";
      }
    } else if (datatype === RequestDataset.FORMDATA) {
      return "multipart/form-data";
    } else if (datatype === RequestDataset.URLENCODED) {
      return "application/x-www-form-urlencoded";
    } else if (datatype === RequestDataset.NONE) {
      return "text/plain";
    }
    return "";
  };

  /**
   * Sets environment variables in a given text by replacing placeholders with corresponding values.
   * @param {string} text - The text containing placeholders for environment variables.
   * @param environmentVariables - Array of objects containing key-value pairs for environment variables.
   * @returns {string} The text with placeholders replaced by environment variable values.
   */
  private setEnvironmentVariables = (
    text: string,
    environmentVariables,
  ): string => {
    let updatedText = text;
    environmentVariables.forEach((element) => {
      const regex = new RegExp(`{{(${element.key})}}`, "g");
      updatedText = updatedText.replace(regex, element.value);
    });
    return updatedText;
  };

  /**
   * Extract details from request and return formatted form of Request
   * @param request - User Request
   * @param environmentVariables - Array of objects containing key-value pairs for environment variables.
   */
  public init(request: any, environmentVariables): string[] {
    return [
      this.extractURL(
        this.setEnvironmentVariables(request.url, environmentVariables),
        request,
        environmentVariables,
      ),
      this.extractMethod(request.method),
      this.setEnvironmentVariables(
        this.extractHeaders(
          request.headers,
          request.autoGeneratedHeaders,
          request,
        ),
        environmentVariables,
      ),
      this.extractBody(
        request.state.requestBodyNavigation,
        request.state.requestBodyLanguage,
        request.body,
      ),
      this.extractDataType(
        request.state.requestBodyNavigation,
        request.state.requestBodyLanguage,
      ),
    ];
  }
}

export { DecodeRequest };
