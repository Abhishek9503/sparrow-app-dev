import type { TabDocument } from "$lib/database/app.database";
import {
  AuthSection,
  AuthType,
  ItemType,
  RequestDataType,
  RequestDataset,
  RequestDefault,
  RequestMethod,
  RequestSection,
  ResponseFormatter,
  ResponseSection,
} from "$lib/utils/enums";
import type {
  Auth,
  Body,
  KeyValuePair,
  Path,
} from "$lib/utils/interfaces/request.interface";
import { v4 as uuidv4 } from "uuid";

class InitRequestTab {
  private _tab: TabDocument;
  /**
   *
   * @param _id - Request mongo id
   * @param _workspaceId - Workspace Id to which Request belongs to
   */
  constructor(_id: string, _workspaceId: string) {
    if (!_id || !_workspaceId) {
      console.error("invalid id or workspace id on create new tab request!");
    } else {
      this._tab = {
        id: _id,
        tabId: uuidv4(),
        name: RequestDefault.NAME,
        type: ItemType.REQUEST,
        description: "",
        source: "USER",
        isDeleted: false,
        activeSync: false,
        property: {
          request: {
            method: RequestMethod.GET,
            body: {
              raw: "",
              urlencoded: [
                {
                  key: "",
                  value: "",
                  checked: false,
                },
              ],
              formdata: {
                text: [
                  {
                    key: "",
                    value: "",
                    checked: false,
                  },
                ],
                file: [
                  {
                    key: "",
                    value: "",
                    checked: false,
                    base: "",
                  },
                ],
              },
            },
            url: "",
            headers: [
              {
                key: "",
                value: "",
                checked: false,
              },
            ],
            queryParams: [
              {
                key: "",
                value: "",
                checked: false,
              },
            ],
            autoGeneratedHeaders: [
              {
                key: "Accept",
                value: "*/*",
                checked: true,
              },
              {
                key: "Connection",
                value: "keep-alive",
                checked: true,
              },
            ],
            state: {
              requestBodyLanguage: RequestDataType.TEXT,
              requestBodyNavigation: RequestDataset.NONE,
              requestAuthNavigation: AuthType.NO_AUTH,
              requestNavigation: RequestSection.PARAMETERS,
              responseNavigation: ResponseSection.RESPONSE,
              responseBodyLanguage: RequestDataType.TEXT,
              responseBodyFormatter: ResponseFormatter.PRETTY,
              requestExtensionNavigation: "",
              requestSplitterDirection: "horizontal",
              requestLeftSplitterWidthPercentage: 50,
              requestRightSplitterWidthPercentage: 50,
              isExposeEditDescription: true,
              isSendRequestInProgress: false,
              isSaveDescriptionInProgress: false,
              isSaveRequestInProgress: false,
            },
            auth: {
              bearerToken: "",
              basicAuth: {
                username: "",
                password: "",
              },
              apiKey: {
                authKey: "",
                authValue: "",
                addTo: AuthSection.HEADER,
              },
            },
            response: {
              headers: "",
              status: "",
              body: "",
              time: 0,
              size: 0,
            },
          },
        },
        path: {
          workspaceId: _workspaceId,
          collectionId: "",
          folderId: "",
        },
        isSaved: true,
        index: 0,
        isActive: true,
        timestamp: new Date().toString(),
      };
    }
  }
  public getValue(): TabDocument {
    return this._tab;
  }
  public getSpacificValue(_value: string) {
    return this._tab[_value];
  }
  public updateId(_id: string) {
    this._tab.id = _id;
  }
  public updateName(_name: string) {
    this._tab.name = _name;
  }
  public updateDescription(_description: string) {
    this._tab.description = _description;
  }
  public updatePath(_path: Path) {
    this._tab.path = _path;
  }
  public updateUrl(_url: string) {
    if (_url) {
      this._tab.property.request.url = _url;
    }
  }
  public updateMethod(_method: string) {
    if (_method) {
      this._tab.property.request.method = _method;
    }
  }
  public updateBody(_body: Body) {
    if (_body) {
      this._tab.property.request.body = _body;
    }
  }
  public updateQueryParams(_queryParams: KeyValuePair[]) {
    if (_queryParams) {
      this._tab.property.request.queryParams = _queryParams;
    }
  }
  public updateHeaders(_headers: KeyValuePair[]) {
    if (_headers) {
      this._tab.property.request.headers = _headers;
    }
  }
  public updateAuth(_auth: Auth) {
    if (_auth) {
      this._tab.property.request.auth = _auth;
    }
  }
  public updateAutoGeneratedHeaders(_autoGeneratedHeaders: KeyValuePair) {
    this._tab.property.request.autoGeneratedHeaders = _autoGeneratedHeaders;
  }
  public updateIsSave(_isSave: boolean) {
    this._tab.isSaved = _isSave;
  }
}

export { InitRequestTab };
