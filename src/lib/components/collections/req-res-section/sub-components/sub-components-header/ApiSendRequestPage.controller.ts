import {
  RequestDataset,
  RequestMethod,
  RequestDataType,
} from "$lib/utils/enums/request.enum";
import {
  findAuthHeader,
  findAuthParameter,
} from "$lib/utils/helpers/auth.helper";
import type {
  Body,
  KeyValuePair,
  NewTab,
} from "$lib/utils/interfaces/request.interface";
import type {
  RequestDatasetType,
  RequestRawType,
} from "$lib/utils/types/request.type";

enum fileType {
  FILE = "File",
  TEXT = "Text",
}

type Type = "File" | "Text";

class ApiSendRequestController {
  /* eslint-disable @typescript-eslint/no-explicit-any */
  private extractKeyValue = (pairs: any[], type: Type): string => {
    let response: string = "";
    let storage: string = "";
    let count: number = 0;
    for (const pair of pairs) {
      if (pair.checked) {
        count++;
        if (type === fileType.TEXT) {
          storage += `${pair.key}=${pair.value}&`;
        } else if (type === fileType.FILE) {
          storage += `file::${pair.key}=${pair.base}&`;
        }
      }
    }
    if (count !== 0) {
      response = storage.slice(0, -1);
    }
    return response;
  };

  private extractURl = (url: string, requestData: NewTab): string => {
    const authHeader: {
      key: string;
      value: string;
    } = findAuthParameter(requestData);
    if (authHeader.key && authHeader.value) {
      let flag: boolean = false;
      for (let i = 0; i < url.length; i++) {
        if (url[i] === "?") {
          flag = true;
        }
      }
      if (!flag) {
        url + "?" + authHeader.key + "=" + authHeader.value;
      }
      return url + "&" + authHeader.key + "=" + authHeader.value;
    }
    return url;
  };

  private extractHeaders = (
    headers: KeyValuePair[],
    autoGeneratedHeaders: KeyValuePair[],
    requestData: NewTab,
  ): string => {
    const authHeader: {
      key: string;
      value: string;
    } = findAuthHeader(requestData);
    if (authHeader.key && authHeader.value) {
      return (
        authHeader.key +
        "=" +
        authHeader.value +
        "&" +
        this.extractKeyValue(
          [...headers, ...autoGeneratedHeaders],
          fileType.TEXT,
        )
      );
    }
    return this.extractKeyValue(
      [...headers, ...autoGeneratedHeaders],
      fileType.TEXT,
    );
  };

  private extractBody = (
    datatype: RequestDatasetType,
    rawData: RequestRawType,
    body: Body,
  ): string => {
    const { raw, urlencoded, formdata } = body;
    if (datatype === RequestDataset.RAW) {
      if (rawData === RequestDataType.JSON && raw === "") {
        return "{}";
      }
      return raw;
    } else if (datatype === RequestDataset.FORMDATA) {
      return (
        this.extractKeyValue(formdata.text, fileType.TEXT) +
        "&" +
        this.extractKeyValue(formdata.file, fileType.FILE)
      );
    } else if (datatype === RequestDataset.URLENCODED) {
      return this.extractKeyValue(urlencoded, fileType.TEXT);
    } else if (datatype === RequestDataset.NONE) {
      return "";
    }
  };

  private extractMethod = (method: string): string => {
    if (method === RequestMethod.DELETE) {
      return "DELETE";
    } else if (method === RequestMethod.GET) {
      return "GET";
    } else if (method === RequestMethod.HEAD) {
      return "HEAD";
    } else if (method === RequestMethod.OPTIONS) {
      return "OPTIONS";
    } else if (method === RequestMethod.PATCH) {
      return "PATCH";
    } else if (method === RequestMethod.POST) {
      return "POST";
    } else if (method === RequestMethod.PUT) {
      return "PUT";
    }
  };

  private extractDataType = (
    datatype: RequestDatasetType,
    raw: RequestRawType,
  ): string => {
    if (datatype === RequestDataset.RAW) {
      if (raw === RequestDataType.JSON) {
        return "JSON";
      } else {
        return "TEXT";
      }
    } else if (datatype === RequestDataset.FORMDATA) {
      return "FORMDATA";
    } else if (datatype === RequestDataset.URLENCODED) {
      return "URLENCODED";
    } else if (datatype === RequestDataset.NONE) {
      return "TEXT";
    }
  };

  public decodeRestApiData(requestData: NewTab): string[] {
    return [
      this.extractURl(requestData.request.url, requestData),
      this.extractMethod(requestData.request.method),
      this.extractHeaders(
        requestData.request.headers,
        requestData.request.autoGeneratedHeaders,
        requestData,
      ),
      this.extractBody(
        requestData.request.state.dataset,
        requestData.request.state.raw,
        requestData.request.body,
      ),
      this.extractDataType(
        requestData.request.state.dataset,
        requestData.request.state.raw,
      ),
    ];
  }
}

export { ApiSendRequestController };
